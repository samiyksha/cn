class NetworkDV:
 def __init__(self, num_nodes):
 self.num_nodes = num_nodes
 self.graph = [[float('inf')] * num_nodes for _ in range(num_nodes)]
 for i in range(num_nodes):
 self.graph[i][i] = 0 # Distance to itself is always 0
 def add_link(self, u, v, weight):
 # Add a link (edge) between u and v
 self.graph[u][v] = weight
 self.graph[v][u] = weight
 def bellman_ford(self, start):
 distances = [float('inf')] * self.num_nodes
 distances[start] = 0
 for _ in range(self.num_nodes - 1):
 for u in range(self.num_nodes):
 for v in range(self.num_nodes):
 if self.graph[u][v] != float('inf'):
 new_distance = distances[u] + self.graph[u][v]
 if new_distance < distances[v]:
 distances[v] = new_distance
 return distances
# Example usage
   if __name__ == "__main__":
 network = NetworkDV(5) # Create a network with 5 nodes (0 to 4)
 
 # Add links (edges) between nodes
 network.add_link(0, 1, 2)
 network.add_link(0, 2, 4)
 network.add_link(1, 2, 1)
 network.add_link(1, 3, 7)
 network.add_link(2, 3, 3)
 network.add_link(3, 4, 1)
 start_node = 0
 distances = network.bellman_ford(start_node)
 
 print(f"Shortest paths from node {start_node}:")
 for node, distance in enumerate(distances):
 print(f"Node {node} -> Distance {distance}")
